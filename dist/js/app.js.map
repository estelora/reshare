{"version":3,"sources":["app.js","nav/main-nav-controller.js","shares/shares-controller.js","shares/shares-factory.js","users/user-controller.js","users/user.js","users/users-controller.js","new-share/new-share-controller.js","utils/string-util.js","users/services/users-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', function($location, StringUtil) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n  }]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'ctrl'\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', [\n  //inject sharesApi so the controller has a factory to use\n  'sharesApi',\n  //inject our object into this function\nfunction (sharesApi) {\n  // loaded with ajax in shares-factory.js\n  var self= this;\n  //call the getList function for sharesApi factory\n  // EX: ctrl has a shares array [1,2,3] on it.\n  // EX: self.shares = [1,2,3];\n\n  // shares.html needs access to the array of shares that\n  //we get back from sharesApi.\n  sharesApi.getList()\n    .then(function(result){\n    //the list of shares\n    //we have to get some data from our server\n    //we have an api call (sharesApi.getList())\n    //we get some data from the api call\n    //now we have to EXPOSE the data to our controller\n    //the template can access the data by making putting the\n    //result on self.shares.\n    self.shares = result.data;\n  })\n  .catch(function(error){\n    alert('No shares could be retrieved.');\n  });\n\n  self.deleteShare = function(share) {\n    //get the id of the share (._id) and pass as parameter\n    // When it comes to asynchronous actions (or promises),\n    // make sure to handle both the success (then) and error (catch) case.\n    sharesApi.deleteById(share._id);\n    .then(function(result){\n      location.reload();\n    })\n    .catch(function(error){\n      console.log('Cannot delete share, tired of using alerts!')\n    });\n  }\n\n}]);\n","app.factory('sharesApi', ['$http', function ($http) {\n\n  return {\n    getList: function() {\n      return $http.get('/api/res');\n    },\n    getById: function(id) {\n      return $http.get('/api/res/'+id);\n      //pass an id in at :id\n    },\n    /*\n    pass in the post object as parameter\n    {\n      url: 'http://google.com',\n      description: 'A good search engine',\n      tags: ['search-engines', 'google']\n    }*/\n    post: function(post) {\n      // DOCS: https://docs.angularjs.org/api/ng/service/$http#post\n      return $http.post('/api/res/', post);\n    },\n    deleteById: function(id) {\n      return $http.delete('/api/res/'+id);\n    },\n  }\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  this.user = user;\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'new-share/new-share.html',\n    controller: 'NewShareCtrl',\n    controllerAs: 'ctrl'\n  };\n  $routeProvider.when('/new-share', routeDefinition);\n}])\n\n\napp.controller('NewShareCtrl', [\n  'sharesApi',\n\nfunction(sharesApi) {\n  var self = this;\n  //represent the post as an empty object {}\n  // will be filled in with url, description, and tags\n  // user will fill in with the ng-model\n  self.post = {\n    url: '',\n    description: '',\n    tags: [],\n  };\n\n\n  self.submitShare=function() {\n    sharesApi.post(self.post)\n    .then(function(result){\n      //posts it to the list, go back to index\n      window.history.back();\n    })\n    .catch(function(error){\n      alert('Post unsuccessful.');\n    })\n  }\n\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.factory('usersService', ['$http', '$q', '$log', function($http, $q, $log) {\n  // My $http promise then and catch always\n  // does the same thing, so I'll put the\n  // processing of it here. What you probably\n  // want to do instead is create a convenience object\n  // that makes $http calls for you in a standard\n  // way, handling post, put, delete, etc\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return processAjaxPromise($http.post('/api/users', user));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}